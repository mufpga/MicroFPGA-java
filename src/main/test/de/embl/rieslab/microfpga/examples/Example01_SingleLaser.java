package de.embl.rieslab.microfpga.examples;

import de.embl.rieslab.microfpga.MicroFPGAController;
import de.embl.rieslab.microfpga.devices.LaserParameters;
import de.embl.rieslab.microfpga.devices.LaserTriggerMode;

/**
 * Illustrate how to set the parameters of a single laser in passive camera
 * trigger mode.
 *
 * The passive camera trigger mode is enforced as soon as no {@code useCamera}
 * is set to false while instantiating a MicroFPGAController. In passive mode,
 * lasers are triggered by processing an external signal, usually generated by
 * a camera (such as a "fire" or "exposure" trigger output).
 *
 * Laser triggering obey three parameters:
 *  - Mode: there are five modes (ON, OFF, RISING, FALLING, FOLLOWING)
 *  - Duration: the duration is comprised between 0 and 65535 us and only
 *              affects the RISING and FALLING modes.
 *  - Sequence: the sequence consists of 16 bits (0 or 1), each bit corresponding
 *              to a frame in which the laser will be triggered (1) or not (0). The
 *              sequence only affects the RISING, FALLING and FOLLOWING modes.
 *
 * In ON mode, the laser is consistently on, and likewise in the OFF mode. In
 * RISING and FALLING mode, the laser is pulsing on the rising or falling edge
 * of the external camera trigger. The pulse length is then determined by the
 * value of the duration in us. Finally, in FOLLOWING mode, the laser trigger
 * is the same as the external camera trigger that is fed to the FPGA.
 *
 * @author Joran Deschamps
 *
 */
public class Example01_SingleLaser {

    public static void main(String[] args) {

        try {
            // connect to the FPGA by creating a controller
            MicroFPGAController controller = new MicroFPGAController(
                    1, // number of lasers
                    0,    // number of TTL signals
                    0, // number of servos
                    0,    // number of PWM signals
                    0,     // number of analog inputs (only Au and Au+)
                    false   // whether we need to change between active/passive camera synchronisation
            );

            if(controller.isConnected()){
                // print ID (Au, Au+ or Cu)
                System.out.println("Connected to " + controller.getID());

                // we only have a single laser, its id will therefore be 0 (we use 0-based numbering).
                final int laserID = 0;

                // let's see what its current state is
                System.out.println("Current state: "+controller.getLaserParametersPretty(laserID));

                // now let us create a set of parameters and apply them to the laser
                LaserParameters p = new LaserParameters(
                        LaserTriggerMode.RISING,    // there are five modes: On, Off, Rising, Falling and Following
                        1000,               // the duration is in us so 1000 us = 1ms
                        "1010101010101010"  // the sequence is 16 bits and corresponds to on or off frames
                );
                System.out.println("Parameters to set: "+p);

                // apply the parameters
                controller.setLaserParameters(laserID, p);

                // and we check the current state
                System.out.println("New state: "+controller.getLaserParametersPretty(laserID));

                // we can change again the parameters
                p.setMode(LaserTriggerMode.FALLING);
                p.setDuration(2000);
                p.setSequence("0011001100110011");
                controller.setLaserParameters(laserID, p);
                System.out.println("New state: "+controller.getLaserParametersPretty(laserID));

                // disconnect from the port
                controller.disconnect();
                System.out.println("Disconnected");

                // even after disconnection, if it is powered, the FPGA will continue to generate the
                // laser trigger signal given the last known parameters and the external camera trigger.
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Failed to connect.");
        }
    }
}
